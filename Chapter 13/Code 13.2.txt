<apex:page controller="YT_Controller"  showHeader="false">
  
	<html><head><title>Google APIs - Sample JS Page</title></head>
	<body>

	<!-- (i) Create a HTML button and output Text elements   -->

	<button id="execute-request-button">Authorize</button>
	<button id="showdetails">Insert Record</button>
		<div>
		  Views: <output type= "text" id="v" /><br/>
		  Likes : <output type= "text" id = "l"/><br/>
		  Dislikes: <output type= "text" id= "d"/><br/>
		  Comments: <output type= "text" id= "c"/><br/>
		  
		</div>    


	<script>

	  /***** START BOILERPLATE CODE: Load client library, authorize user. *****/

	  // Global variables for GoogleAuth object, auth status.
	  var GoogleAuth; 
	  var stringified;

	  /**
	   * Load the API's client and auth2 modules.
	   * Call the initClient function after the modules load.
	   */
	  function handleClientLoad() {
		gapi.load('client:auth2', initClient);
	  }


	// (ii) function initiating the google client library, defining scope and hitting the endpoint   
	  function initClient() {
		// Initialize the gapi.client object, which app uses to make API requests.
		// Get API key and client ID from API Console.
		// 'scope' field specifies space-delimited list of access scopes

		gapi.client.init({
			'clientId': '1092219525355-o2p9ksc8dc8dgldi3898njttlsrph43c.apps.googleusercontent.com',
			'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest'],
			'scope': 'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner'
		}).then(function () {
		  GoogleAuth = gapi.auth2.getAuthInstance();

		  // Listen for sign-in state changes.
		  GoogleAuth.isSignedIn.listen(updateSigninStatus);

		  // Handle initial sign-in state. (Determine if user is already signed in.)
		  setSigninStatus();

		  // Call handleAuthClick function when user clicks on "Authorize" button.
		  $('#execute-request-button').click(function() {
			handleAuthClick(event);
			}); 
			
			// (iii)  Insert a record in 'YouTube Details' object by invoking Javascript Remoting technique 
			// youtube information will get inserted as record once you hit 'Insert Record' button 
			$('#showdetails').click(function() {
				
			Visualforce.remoting.Manager.invokeAction(
				'{!$RemoteAction.YT_Controller.insertVideoDetails}',
				 stringified, 
				function(result, event){
					if (event.status) {
						
					   alert('New record is inserted');
					} else if (event.type === 'exception') {
					   alert('failure');
					} else {
						alert('failure 1');
					}
				}, 
				{escape: true}
			);
			
		  }); 
		});
	  }

	  function handleAuthClick(event) {
		// Sign user in after click on auth button.
		GoogleAuth.signIn();
	  }

	  function setSigninStatus() {
		var user = GoogleAuth.currentUser.get();
		isAuthorized = user.hasGrantedScopes('https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner');
		// Toggle button text and displayed statement based on current auth status.
		if (isAuthorized) {
		  defineRequest();
		}
	  }

	  function updateSigninStatus(isSignedIn) {
		setSigninStatus();
	  }

	  function removeEmptyParams(params) {
		for (var p in params) {
		  if (!params[p] || params[p] == 'undefined') {
			delete params[p];
		  }
		}
		return params;
	  }
	  
	// (iii)  function for mapping the response to the HTML elements on the page.   
	  function executeRequest(request) {
		request.execute(function(response) {
		  console.log(response);
		   console.log('response---------- '+response);  
		  
		  
		  //The JSON.stringify() method converts a JavaScript value to a JSON string
		  // this string is then passed to remoting method
		  stringified = JSON.stringify(response);
		  var view ;
		  var likes ;
		  var dislikes ;
		  var comment ;
			 view = response.items[0].statistics.viewCount;
			 console.log('view '+ view);
			 likes = response.items[0].statistics.likeCount;
			 console.log('likes '+ likes);
			 dislikes = response.items[0].statistics.dislikeCount;
			 console.log('dislikeCount '+ dislikes );
			 comment = response.items[0].statistics.commentCount;
			 console.log('commentCount '+ comment);
			 
			 
			document.getElementById("v").value  = view;
			document.getElementById("l").value = likes;
			document.getElementById("d").value = dislikes;
			document.getElementById("c").value = comment;
	 
						   
		   return response;
		});
	  }

	  function buildApiRequest(requestMethod, path, params, properties) {
		params = removeEmptyParams(params);
		var request;
		if (properties) {
		  var resource = createResource(properties);
		  request = gapi.client.request({
			  'body': resource,
			  'method': requestMethod,
			  'path': path,
			  'params': params
		  });
		} else {
		  request = gapi.client.request({
			  'method': requestMethod,
			  'path': path,
			  'params': params
		  });
		}
		executeRequest(request);
	  }

	  /***** END BOILERPLATE CODE *****/

	  
	  function defineRequest() {
		// See full sample for buildApiRequest() code, which is not 
	// specific to a particular API or API method.

	buildApiRequest('GET',
					'/youtube/v3/videos',
					{'id': 'xmU0s2QtaEY',
					 'part': 'statistics'} 
					);
	  
	  }
	</script>

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
	<script async= "" defer="" src="https://apis.google.com/js/api.js" 
			onload="this.onload=function(){};handleClientLoad()" 
			onreadystatechange="if (this.readyState === 'complete') this.onload()">
	</script>
	</body></html>
</apex:page>