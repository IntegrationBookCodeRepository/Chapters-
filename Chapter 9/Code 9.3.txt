global class Gmail_Details_onRecord {
    public static string resp{get; set;}
    public static list<string> listIds {get; set;}
    public static string msgs;
    
      public static string subValue = '';
      public static string toValue = '';
      public static string fromValue = '';
      public static string dateValue = '';
      public static string body = '';
      
      public static list<string> ListToContainEmailBody = new list<string>();
    
    public static void messages(){
        String fieldValue = '';
        HttpRequest req= new HttpRequest();
        Http con123 = new Http();    
        
        
        
        string userid = 'kunwar.research@gmail.com';
        string b ='https://www.googleapis.com/gmail/v1/users/me/messages';
         
   //      string b ='https://www.googleapis.com/gmail/v1/users/me/messages/'+msgs;
        req.setMethod('GET');
        req.setEndpoint(b);
        string access_tok ='ya29.GlssBsopPxKcTQ5vWuY9eU9H21IA7-CoKftKZ2oFW5pmoIUt_MhGLw22n7RstISPUVBSDeELehvsIiCuX0lqL7Di_dbSREsi9-vVRbgFKpdFRuD0K46RTHN9hNCO';
        String authorizationHeader = 'Bearer' + ' ' + string.valueof(access_tok);
        req.setHeader('Authorization', authorizationHeader);
       
        HttpResponse hs1 = con123.send(req);
        string resp = hs1.getbody();
        system.debug('resp----------- '+resp);
        
        // prefix [ before the json response and suffix ] after the json response to make the response as an array 
        string jsonstr = ('['+hs1.getbody()+']');
        
        
      // Debug the list of gmail message ids using JSON2Apex_Gmail class
    
       list<JSON2Apex_Gmail > deserializedbodies = (list<JSON2Apex_Gmail >)JSON.deserialize(jsonstr , list<JSON2Apex_Gmail >.class); 
       JSON2Apex_Gmail deserializedbodies1 = (JSON2Apex_Gmail)JSON.deserialize(hs1.getBody() , JSON2Apex_Gmail.class);
      //  string a = deserializedbodies[0].messages[0].id; // for one id
        listIds = new list<string>();
        Integer count = 0;
        
        for(JSON2Apex_Gmail db : deserializedbodies  ){
            for(JSON2Apex_Gmail.Messages msg : db.Messages){
            listIds.add(msg.id);
            msgs = listIds[0];
            // by default 100 message ids will be received
            count = listIds.size();
            }
        }
        
     
        system.debug('resp --->'+resp );
        system.debug('listIds-------> '+ listIds);   
        system.debug('count---------> '+ count);  
        
        // referencing a static id for demonstration purpose, you can make it dynamic from the response you are getting above.
        string msgs = '1663ed992f35b5da';
        fetchemail(msgs);         
    }
    
     /*---------------------------------- method to fetch a specified email body and map it to custom object record------------------------------------*/
     public static void fetchemail(string m){
        HttpRequest req= new HttpRequest();
        Http con123 = new Http();    
         
        string userid = 'kunwar.research@gmail.com';
        string b ='https://www.googleapis.com/gmail/v1/users/me/messages/'+m;
        req.setMethod('GET');
        req.setEndpoint(b);
        string access_tok ='ya29.GlssBsopPxKcTQ5vWuY9eU9H21IA7-CoKftKZ2oFW5pmoIUt_MhGLw22n7RstISPUVBSDeELehvsIiCuX0lqL7Di_dbSREsi9-vVRbgFKpdFRuD0K46RTHN9hNCO';
        String authorizationHeader = 'Bearer' + ' ' + string.valueof(access_tok);
        req.setHeader('Authorization', authorizationHeader);
       
        HttpResponse hs1 = con123.send(req);
        string resp = hs1.getbody();
        system.debug('resp----------- '+resp);
        
        // parsing using JSON parser
          JSONParser parser = JSON.createParser(resp);
         
        while (parser.nextToken() != null) {
            if ((parser.getText() == 'Subject')) {
                // Get the value.
                parser.nextToken();
                parser.nextToken();
                subValue = parser.getText();
                system.debug('value ---- '+subValue);               
            }
             if ((parser.getText() == 'To')) {
                // Get the value.
                parser.nextToken();
                parser.nextToken();
                toValue = parser.getText();
                system.debug('toValue---- '+toValue);               
            }
             if ((parser.getText() == 'From')) {
                // Get the value.
                parser.nextToken();
                parser.nextToken();
                fromValue = parser.getText();
                system.debug('fromValue---- '+fromValue);               
            }
            if ((parser.getText() == 'Date')) {
                // Get the value.
                parser.nextToken();
                parser.nextToken();
                dateValue = parser.getText();
                system.debug('dateValue---- '+dateValue);               
            }
            if ((parser.getText() == 'data')) {
                // Get the value.
                parser.nextToken();
                
                string bodyValue = parser.getText();
                system.debug('bodyValue---- '+bodyValue); 
                ListToContainEmailBody.add(bodyValue);
                         
                
            }
        }
         system.debug('ListToContainEmailBody---- '+ListToContainEmailBody);
                blob decodedbody = EncodingUtil.base64Decode(ListToContainEmailBody[0]);
                
                
                system.debug('decodedbody--------- '+decodedbody);
                body = decodedbody.tostring();
                system.debug('********decodedbody:' + body);
        
     }
     
      webService static void fetchEmailBody(String recordid){
      messages();
      Gmail_info__c GM = new Gmail_info__c();
      GM.To__c = toValue;
      GM.From__c = fromValue;
      GM.Date__c =dateValue;
      GM.Subject__c = subValue;
      GM.Body__c = body;
      GM.id = recordid;
      update GM;
     
      }
}
